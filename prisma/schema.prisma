generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Product {
  id               Int                      @id @default(autoincrement())
  name             String
  description      String
  unitId           Int
  price            Float
  categoryId       Int
  placeId          Int
  statusId         Int
  observation      String?
  image            String?
  enabled          Boolean                  @default(true)
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  checklistDetails ChecklistDetail[]
  category         Category                 @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  place            Place                    @relation(fields: [placeId], references: [id], onDelete: Cascade)
  status           ProductStatus            @relation(fields: [statusId], references: [id], onDelete: Cascade)
  unit             Unit                     @relation(fields: [unitId], references: [id], onDelete: Cascade)
  purchaseDetails  PurchasesHistoryDetail[]

  @@index([name])
  @@index([enabled])
  @@index([createdAt])
}

model Unit {
  id                     Int                      @id @default(autoincrement())
  name                   String                   @unique
  nemonico               String
  enabled                Boolean                  @default(true)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  checklistPantryUnits   ChecklistDetail[]        @relation("PantryUnit")
  checklistRequiredUnits ChecklistDetail[]        @relation("RequiredUnit")
  products               Product[]
  purchasesHistoryDetail PurchasesHistoryDetail[]

  @@index([name])
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  icon      String
  color     String
  enabled   Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@index([name])
}

model Place {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  shortName String
  color     String
  enabled   Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@index([name])
}

model ProductStatus {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  enabled   Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@index([name])
}

model PurchasesHistoryHeader {
  id                     Int                      @id @default(autoincrement())
  year                   Int
  month                  Int
  amountPurchase         Int
  totalPurchase          Float
  enabled                Boolean                  @default(true)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  purchasesHistoryDetail PurchasesHistoryDetail[]

  @@index([year])
  @@index([month])
  @@index([createdAt])
  @@index([totalPurchase])
}

model PurchasesHistoryDetail {
  id                       Int                    @id @default(autoincrement())
  purchasesHistoryHeaderId Int
  productId                Int
  amountProduct            Int                    @default(1)
  unitProduct              Int
  subTotalProduct          Float
  enabled                  Boolean                @default(true)
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  product                  Product                @relation(fields: [productId], references: [id], onDelete: Cascade)
  purchasesHistoryHeader   PurchasesHistoryHeader @relation(fields: [purchasesHistoryHeaderId], references: [id], onDelete: Cascade)
  unit                     Unit                   @relation(fields: [unitProduct], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([subTotalProduct])
}

model ChecklistHeader {
  id               Int               @id @default(autoincrement())
  year             Int
  month            Int
  enabled          Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  checklistDetails ChecklistDetail[]

  @@index([year])
  @@index([month])
  @@index([createdAt])
}

model ChecklistDetail {
  id                    Int             @id @default(autoincrement())
  checklistHeaderId     Int
  productId             Int
  pantryAmountProduct   Int
  pantryUnitProduct     Int
  requiredAmountProduct Int
  requiredUnitProduct   Int
  enabled               Boolean         @default(true)
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  checklistHeader       ChecklistHeader @relation(fields: [checklistHeaderId], references: [id], onDelete: Cascade)
  pantryUnit            Unit            @relation("PantryUnit", fields: [pantryUnitProduct], references: [id], onDelete: Cascade)
  product               Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  requiredUnit          Unit            @relation("RequiredUnit", fields: [requiredUnitProduct], references: [id], onDelete: Cascade)

  @@index([createdAt])
}
